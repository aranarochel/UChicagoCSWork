(* backend.sml
 *
 * CMSC22610 Winter 2015 Sample code.
 *
 * COPYRIGHT (c) 2015 John Reppy (http://cs.uchicago.edu/~jhr)
 * All rights reserved.
 *
 * This module glues together the backend passes that constitute Project 4.
 *)

structure Backend : sig

    type flags = {
	printAST : bool,	(* if true, print the simplified AST *)
	printSIR : bool,	(* if true, print the Simple IR to a file *)
	printCode : bool	(* if true, print the bytecode to a file *)
      }

    val compile : flags -> string * AST.program -> unit

  end = struct

  	structure BN = BasisNames

  	(* representation of data constructors *)
	datatype conRep = NullCon of int
  	                | DConIm  of Type.ty 
  	                | DConTup of int * Type.ty

  	(* representation of types *)
  	datatype typeRep = Unboxed
  	                 | Boxed
  	                 | Mixed

  	(* initial data constructor representation hash table *)
  	val dataConTbl : conRep  AtomTable.hash_table = 
  		let val tbli = AtomTable.mkTable (100, Fail "Data Con not found")
            val _ = AtomTable.insert tbli (BN.unitUnit, NullCon 0)
            val _ = AtomTable.insert tbli (BN.boolFalse, NullCon 0)
            val _ = AtomTable.insert tbli (BN.boolTrue, NullCon 1)
            val _ = AtomTable.insert tbli (BN.listNil, NullCon 0)
        in
        	tbli
       	end


    (* initial type representation hash table *)
  	val typesTbl   : typeRep AtomTable.hash_table = 
  		let val tbli = AtomTable.mkTable (100, Fail "Type not found")
  			val _ = AtomTable.insert tbli (BN.bool, Unboxed)
  			val _ = AtomTable.insert tbli (BN.int, Unboxed)
  			val _ = AtomTable.insert tbli (BN.list, Mixed)
  			val _ = AtomTable.insert tbli (BN.string, Boxed)
  			val _ = AtomTable.insert tbli (BN.unit, Unboxed)
  		in
  			tbli
  		end

  	

    type flags = {
	printAST : bool,	(* if true, print the simplified AST *)
	printSIR : bool,	(* if true, print the Simple IR to a file *)
	printCode : bool	(* if true, print the bytecode to a file *)
      }

    fun printIR (mkStrm, printFn, ext) = let
	  fun pr (false, _, _, prog) = prog
	    | pr (true, info, stem, prog) = let
		val outS = TextIO.openOut(OS.Path.joinBaseExt{base=stem, ext=SOME ext})
		val strm = mkStrm (outS, info)
		in
		  printFn (strm, prog) handle ex => (TextIO.closeOut outS; raise ex);
		  TextIO.closeOut outS;
		  prog
		end
	  in
	    pr
	  end

    fun compile {printAST, printSIR, printCode} (stem, prog) = let
val prog = raise Fail "Backend.compile" (** YOUR CODE HERE **)
	(* then generate code *)
	  val codeS = Emit.openCode (OS.Path.joinBaseExt{base=stem, ext=SOME "vmo"})
	  in
	    CodeGen.gen (codeS, prog);
	  (* dump a textual representation of the code if necessary *)
	    if printCode
	      then let
		val outS = TextIO.openOut(OS.Path.joinBaseExt{base=stem, ext=SOME "vm"})
		in
		  Emit.dump (outS, codeS);
		  TextIO.closeOut outS
		end
	      else ();
	  (* resolve offsets in the code and write it to the object file *)
	    Emit.finish codeS
	  end


	fun uncurry exp = (case exp 
		of 	AST.Exp(AST.LetExp (bind, AST.Exp(exp_rep,ty)), expTy) => (case bind
			of AST.FunBind (var, params, expb) => 
				let fun lp (v, ps, expb') = (case ps
					of [] => expb'
				 	 | p::ps' => AST.Exp(AST.LetExp(AST.FunBind(v,[p],lp(v,ps',expb)),lp(v,ps',expb)),ty)
				 	 (*end case*)) 
				in AST.Exp(AST.LetExp(AST.FunBind(var,[hd(params)],lp(var,tl(params),expb)),AST.Exp(exp_rep,ty)), expTy)
				end
			| _ => exp
			(*end case*))
		| _ => exp
		(*end case*))

	fun etaConvert exp = raise Fail "fix and uncomment etaConvert" (*
		(case exp
		(*| datacons *)
		of AST.Exp(AST.ConExp(dcon), ty) => let 
				val name = DataCon.nameOf(dcon) 		(*name of the dcon*)
				val isNully = DataCon.isNullary(dcon) 	(*is nullary data constructor*)
				val tyCon = DataCon.tycOf(dcon) 		(*data-type constructor this dcon belongs to*)
				val typOf = DataCon.typeOf(dcon) 		(*polymorphic if owning data type is parameterized, funTy if !isNully*)
			
				val (dcTyvars, dcTyOpt, dcTy) = DataCon.sigOf(dcon)
				val bindVar = Var.new(Atom.atom("mk"^name), ty)
				val bind = if (isSome(dcTyOpt)) (*if owning type is parameterized*)
						   then AST.FunBind(bindVar, dcTyvars, AST.Exp( (*???*), typOf)) (*want: what does this dcon do*)
						   else AST.FunBind(bindVar, dcTyvars, AST.Exp(AST.IntExp(0), typOf)) (*NONE case? maybe?*)
				val exp = AST.Exp( AST.(*???*), typOf) (*want: what do we apply this dcon to*)
			in 
				AST.Exp(AST.LetExp(bind, exp),ty)
			end
	   (*| Primitive functions - i think eta expansion into tuples happens later?*)
	   	 | of AST.Exp(
	   	 		AST.AppExp(
	   	 			AST.Exp(AST.VarExp(operator), opTy),
	   	 			exp2),
	   	 		resultTy)
	   	 	=> (case operator
	   	 			of ignore => AST.Exp(exp2, Basis.unitTy)
	   	 		(*end case*))
		 | _ => exp 
		 (*end case*))
	*)
	  

	fun initialAST prog = (case prog
		of AST.Program(exp) => AST.Program(etaConvert uncurry exp) (* w/currying for extra irony *)
		(* end case *))

(*Takes AST w/ function definitions and returns hash table(?) of free variable mapped to their functions*)
	fun findFrees exp = (case exp
		of AST.Exp(AST.LetExp(bind, exp'), ty) => (case bind
			of AST.FunBind(var, params, bindExp) => (case params
				of [] => raise Fail "todo"
				 | p::ps => raise Fail "todo"
				 (*end case*))
			 | _ => raise Fail "todo"
			 (*end case*))
		 | _ => exp
		 (*end case*))


<<<<<<< .mine

	(* helper function that return the rep of a typ arg *)
	fun typRepFind (typ,typTbl) = (case typ
		of Type.VarTy _ => Mixed
		 | Type.FunTy (_,_) => Boxed
		 | Type.TupleTy _ => Boxed
		 | Type.ConTy(Type.DataTyc{name, ...},_) => let val tyrep = AtomTable.lookup typTbl (Atom.atom name)
		 	                                        in
		 	                                        	tyrep
		 	                                       	end
		 | _ => raise Fail "dunno what to do about abstract types"
		 (* end case *))


	(* helper functions for each case of mapReps; they match the cases for data con rep on page 3 *)
	fun caseOne (nulls, nindex, tbl) = (case nulls
		of []                   => tbl 
		 | Type.DCon{name,...}::nulls' => let val _ = AtomTable.insert tbl (Atom.atom name, NullCon nindex)
			                       in
			                       	   caseOne(nulls', nindex+1, tbl)
			                       end
		(* end case *))



	(* helper function for findDCs that maps data constructors to their reps in a hash table *)
	fun mapReps (typname, nulls, nindex, dcons, dindex, dconTbl, typTbl) = (case (nulls, dcons)
		of (Type.DCon{name,...}::nulls', []) => let val _    = AtomTable.insert typTbl (typname, Unboxed)
			                                        val dtbl = caseOne(nulls,nindex,dconTbl)
					                            in
					                             	(dtbl, typTbl)
					                            end
		 | ([],[dc as Type.DCon{name,...}]) =>  let val (_, SOME typ, _) = DataCon.sigOf(dc)
		   										        val tyrep = typRepFind(typ, typTbl)
		   										        val _ = AtomTable.insert typTbl (typname, tyrep)
		   										        val _ = AtomTable.insert dconTbl (Atom.atom name, DConIm typ)
		   										    in
		   										   	    (dconTbl,typTbl)
		   										    end
		 | _ => raise Fail "todo"
		 (* end case *))





	(*Takes AST with Data constructors and returns hash table of constructors mapped to a "description of their representation"*)
	fun findDCs (exp, dconsTbl, typsTbl) = (case exp
		of AST.Exp(AST.LetExp(bind,letexp),ty) => 
			(case bind 
			   of AST.DataBind(Type.DataTyc{name, cons, ...}) => 
			   		let val cs = !cons
			   	        val nullaries = List.filter (fn x => DataCon.isNullary x) cs
			   	        val datacons  = List.filter (fn x => not (DataCon.isNullary x)) cs

			   	        val (dataTbl, typTbl) = mapReps (Atom.atom name, nullaries, 1, datacons, 1, dconsTbl, typsTbl)
			   	    in
			   	    	findDCs(letexp, dataTbl, typTbl)
			   	   	end
			   	| _ => findDCs(letexp, dconsTbl, typsTbl)
			   	(* end case *))
		 | AST.Exp(_, _) => (dconsTbl, typsTbl)
		 (* end case *))

		
		

=======

(*translate list of parameters into IR*)
		fun translateParams (params, paramList) = (case params
			of [] => paramList
			 | AST.ValParam varp :: ps => translateParams(ps, (Simple.ParameterExp(Var.nameOf(varp)) :: paramList))
			 | AST.TyParam tvar :: ps => translateParams (ps, paramList)
			 (*end case*))

(*translate list of free varialbes into list of IR local variables*)
		fun translateFrees (vars,varList) = (case vars 
			of [] => varList 
			 | v::vs => let
			 	val index = (case varList 
			 		of [] => 0
			 		 | Simple.LocalVarExp v' :: vs' => #2 (v') + 1
			 		 (*end case*))
			 	val newLocalVar = Simple.LocalVarExp(Var.nameOf(v), index)
			 	in
			 		translateFrees(vs, (newLocalVar :: varList) )
			 	end
			 (*end case*))



>>>>>>> .r63
(*translate AST to simpleIR. functions, data cons, primitives, prim ops, pattern matching*)
		fun progToIR prog = (case prog
			of AST.Exp(exp, progTy) => let 
				val freesDB = findFrees(prog)
				val dcDB = findDCs(prog, dataConTbl, typesTbl)

				fun expToSexp exp = (case exp
					of AST.Exp(exp', expTy) => (case exp'
						of AST.IfExp	(e1,e2,e3) => Simple.IfExp	(expToSexp e1, expToSexp e2, expToSexp e3)
					   (*| AST.AppExp	(e1,e2) => Simple.FAppExp () arguments don't line up*)
					   (*| AST.TyAppExp	(exp,tys) => what does type application mean without types?*)
						 | AST.TupleExp	(exps) => let
						 	fun loop (exps, acc) = (case exps
						 		of [] => Simple.TupleExp(rev acc)
						 		 | e::es => loop(es, expToSexp(e) :: acc)
						 		(*end case*))
						 	in
						 		loop(exps, [])
						 	end
					   (*| AST.LetExp	(bind,exp) => expToDef(exp') ???*)
					   (*| AST.CaseExp	(exp,rules) => Simple.CaseExp  () do pattern matching work here??*)
					   (*| AST.VarExp	(var) => Simple.LocalVarExp () keep track of index?*)
					   (*| AST.ConExp	(dcon) => Simple.ConExp () does this still exist?*)
						 | AST.IntExp	(i) => Simple.NumExp (IntInf.toInt(i))
						 | AST.StrExp	(str) => Simple.StringExp (str)
						 | _ => raise Fail "todo"
						)
					(*end case*))

				fun expToDef exp = (case exp 
					of AST.LetExp(bind, exp') => (case bind 
						of AST.FunBind(var, params, AST.Exp(bindExp,bindExpTy)) => 
							let 
								val frees = AtomTable.lookup(freesDB, Var.nameOf(var))
								val freeList = translateFrees(frees, [])
								val paramList = translateParams (params, [])
								val sExp = expToSexp exp'
								val subExpDef = expToDef(bindExp) (*what do i do with this??*)
							in 
								Simple.Function(Var.nameOf(var), paramList, freeList, sExp) 
							end
						 | AST.DataBind(tycon) => raise Fail "what do"
						 | AST.ValBind(var, exp') => raise Fail "add val to globals?"

						(*end case*))
					(*end case*))
				(*nuf*)
			in 
				expToDef exp
			end
		(*end case*))


  end


