Program
  LetExp : Unit<0006>
    FunBind
      intToString<0021> : Integer<0001> -> String<0002>
      [
        ValParam
          i<0020> : Integer<0001>
      ]
      IfExp : String<0002>
        AppExp : Bool<0004>
          VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
            <<0009>
          TupleExp : Integer<0001> * Integer<0001>
            [
              VarExp : Integer<0001>
                i<0020>
              IntExp : Integer<0001>
                0
            ]
        AppExp : String<0002>
          VarExp : String<0002> * String<0002> -> String<0002>
            @<000A>
          TupleExp : String<0002> * String<0002>
            [
              StrExp : String<0002>
                "~"
              AppExp : String<0002>
                VarExp : Integer<0001> -> String<0002>
                  intToString<0021>
                AppExp : Integer<0001>
                  VarExp : Integer<0001> -> Integer<0001>
                    neg<001B>
                  VarExp : Integer<0001>
                    i<0020>
            ]
        IfExp : String<0002>
          AppExp : Bool<0004>
            VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
              ==<0007>
            TupleExp : Integer<0001> * Integer<0001>
              [
                VarExp : Integer<0001>
                  i<0020>
                IntExp : Integer<0001>
                  0
              ]
          StrExp : String<0002>
            "0"
          IfExp : String<0002>
            AppExp : Bool<0004>
              VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                ==<0007>
              TupleExp : Integer<0001> * Integer<0001>
                [
                  VarExp : Integer<0001>
                    i<0020>
                  IntExp : Integer<0001>
                    1
                ]
            StrExp : String<0002>
              "1"
            IfExp : String<0002>
              AppExp : Bool<0004>
                VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                  ==<0007>
                TupleExp : Integer<0001> * Integer<0001>
                  [
                    VarExp : Integer<0001>
                      i<0020>
                    IntExp : Integer<0001>
                      2
                  ]
              StrExp : String<0002>
                "2"
              IfExp : String<0002>
                AppExp : Bool<0004>
                  VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                    ==<0007>
                  TupleExp : Integer<0001> * Integer<0001>
                    [
                      VarExp : Integer<0001>
                        i<0020>
                      IntExp : Integer<0001>
                        3
                    ]
                StrExp : String<0002>
                  "3"
                IfExp : String<0002>
                  AppExp : Bool<0004>
                    VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                      ==<0007>
                    TupleExp : Integer<0001> * Integer<0001>
                      [
                        VarExp : Integer<0001>
                          i<0020>
                        IntExp : Integer<0001>
                          4
                      ]
                  StrExp : String<0002>
                    "4"
                  IfExp : String<0002>
                    AppExp : Bool<0004>
                      VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                        ==<0007>
                      TupleExp : Integer<0001> * Integer<0001>
                        [
                          VarExp : Integer<0001>
                            i<0020>
                          IntExp : Integer<0001>
                            5
                        ]
                    StrExp : String<0002>
                      "5"
                    IfExp : String<0002>
                      AppExp : Bool<0004>
                        VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                          ==<0007>
                        TupleExp : Integer<0001> * Integer<0001>
                          [
                            VarExp : Integer<0001>
                              i<0020>
                            IntExp : Integer<0001>
                              6
                          ]
                      StrExp : String<0002>
                        "6"
                      IfExp : String<0002>
                        AppExp : Bool<0004>
                          VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                            ==<0007>
                          TupleExp : Integer<0001> * Integer<0001>
                            [
                              VarExp : Integer<0001>
                                i<0020>
                              IntExp : Integer<0001>
                                7
                            ]
                        StrExp : String<0002>
                          "7"
                        IfExp : String<0002>
                          AppExp : Bool<0004>
                            VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                              ==<0007>
                            TupleExp : Integer<0001> * Integer<0001>
                              [
                                VarExp : Integer<0001>
                                  i<0020>
                                IntExp : Integer<0001>
                                  8
                              ]
                          StrExp : String<0002>
                            "8"
                          IfExp : String<0002>
                            AppExp : Bool<0004>
                              VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                                ==<0007>
                              TupleExp : Integer<0001> * Integer<0001>
                                [
                                  VarExp : Integer<0001>
                                    i<0020>
                                  IntExp : Integer<0001>
                                    9
                                ]
                            StrExp : String<0002>
                              "9"
                            AppExp : String<0002>
                              VarExp : String<0002> * String<0002> -> String<0002>
                                @<000A>
                              TupleExp : String<0002> * String<0002>
                                [
                                  AppExp : String<0002>
                                    VarExp : Integer<0001> -> String<0002>
                                      intToString<0021>
                                    AppExp : Integer<0001>
                                      VarExp : Integer<0001> * Integer<0001> -> Integer<0001>
                                        /<000E>
                                      TupleExp : Integer<0001> * Integer<0001>
                                        [
                                          VarExp : Integer<0001>
                                            i<0020>
                                          IntExp : Integer<0001>
                                            10
                                        ]
                                  AppExp : String<0002>
                                    VarExp : Integer<0001> -> String<0002>
                                      intToString<0021>
                                    AppExp : Integer<0001>
                                      VarExp : Integer<0001> * Integer<0001> -> Integer<0001>
                                        %<000F>
                                      TupleExp : Integer<0001> * Integer<0001>
                                        [
                                          VarExp : Integer<0001>
                                            i<0020>
                                          IntExp : Integer<0001>
                                            10
                                        ]
                                ]
    LetExp : Unit<0006>
      FunBind
        boolToString<0023> : Bool<0004> -> String<0002>
        [
          ValParam
            b<0022> : Bool<0004>
        ]
        IfExp : String<0002>
          VarExp : Bool<0004>
            b<0022>
          StrExp : String<0002>
            "True"
          StrExp : String<0002>
            "False"
      LetExp : Unit<0006>
        ValBind
          zero<0024> : Integer<0001>
          IntExp : Integer<0001>
            0
        LetExp : Unit<0006>
          ValBind
            one<0025> : Integer<0001>
            IntExp : Integer<0001>
              1
          LetExp : Unit<0006>
            FunBind
              even'<0028> : (Integer<0001> -> Bool<0004>) -> Integer<0001> -> Bool<0004>
              [
                ValParam
                  odd<0026> : Integer<0001> -> Bool<0004>
                ValParam
                  x<0027> : Integer<0001>
              ]
              IfExp : Bool<0004>
                AppExp : Bool<0004>
                  VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                    <<0009>
                  TupleExp : Integer<0001> * Integer<0001>
                    [
                      VarExp : Integer<0001>
                        x<0027>
                      VarExp : Integer<0001>
                        zero<0024>
                    ]
                AppExp : Bool<0004>
                  AppExp : Integer<0001> -> Bool<0004>
                    VarExp : (Integer<0001> -> Bool<0004>) -> Integer<0001> -> Bool<0004>
                      even'<0028>
                    VarExp : Integer<0001> -> Bool<0004>
                      odd<0026>
                  AppExp : Integer<0001>
                    VarExp : Integer<0001> -> Integer<0001>
                      neg<001B>
                    VarExp : Integer<0001>
                      x<0027>
                IfExp : Bool<0004>
                  AppExp : Bool<0004>
                    VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                      ==<0007>
                    TupleExp : Integer<0001> * Integer<0001>
                      [
                        VarExp : Integer<0001>
                          x<0027>
                        IntExp : Integer<0001>
                          0
                      ]
                  ConExp : Bool<0004>
                    True<0010>
                  AppExp : Bool<0004>
                    VarExp : Integer<0001> -> Bool<0004>
                      odd<0026>
                    AppExp : Integer<0001>
                      VarExp : Integer<0001> * Integer<0001> -> Integer<0001>
                        -<000C>
                      TupleExp : Integer<0001> * Integer<0001>
                        [
                          VarExp : Integer<0001>
                            x<0027>
                          VarExp : Integer<0001>
                            one<0025>
                        ]
            LetExp : Unit<0006>
              FunBind
                odd<002A> : Integer<0001> -> Bool<0004>
                [
                  ValParam
                    x<0029> : Integer<0001>
                ]
                IfExp : Bool<0004>
                  AppExp : Bool<0004>
                    VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                      <<0009>
                    TupleExp : Integer<0001> * Integer<0001>
                      [
                        VarExp : Integer<0001>
                          x<0029>
                        VarExp : Integer<0001>
                          zero<0024>
                      ]
                  AppExp : Bool<0004>
                    VarExp : Integer<0001> -> Bool<0004>
                      odd<002A>
                    AppExp : Integer<0001>
                      VarExp : Integer<0001> -> Integer<0001>
                        neg<001B>
                      VarExp : Integer<0001>
                        x<0029>
                  IfExp : Bool<0004>
                    AppExp : Bool<0004>
                      VarExp : Integer<0001> * Integer<0001> -> Bool<0004>
                        ==<0007>
                      TupleExp : Integer<0001> * Integer<0001>
                        [
                          VarExp : Integer<0001>
                            x<0029>
                          IntExp : Integer<0001>
                            0
                        ]
                    ConExp : Bool<0004>
                      False<0011>
                    AppExp : Bool<0004>
                      AppExp : Integer<0001> -> Bool<0004>
                        VarExp : (Integer<0001> -> Bool<0004>) -> Integer<0001> -> Bool<0004>
                          even'<0028>
                        VarExp : Integer<0001> -> Bool<0004>
                          odd<002A>
                      AppExp : Integer<0001>
                        VarExp : Integer<0001> * Integer<0001> -> Integer<0001>
                          -<000C>
                        TupleExp : Integer<0001> * Integer<0001>
                          [
                            VarExp : Integer<0001>
                              x<0029>
                            VarExp : Integer<0001>
                              one<0025>
                          ]
              LetExp : Unit<0006>
                ValBind
                  even<002B> : Integer<0001> -> Bool<0004>
                  AppExp : Integer<0001> -> Bool<0004>
                    VarExp : (Integer<0001> -> Bool<0004>) -> Integer<0001> -> Bool<0004>
                      even'<0028>
                    VarExp : Integer<0001> -> Bool<0004>
                      odd<002A>
                LetExp : Unit<0006>
                  ValBind
                    n<002C> : Integer<0001>
                    IntExp : Integer<0001>
                      101
                  LetExp : Unit<0006>
                    ValBind
                      even_n<002D> : Bool<0004>
                      AppExp : Bool<0004>
                        VarExp : Integer<0001> -> Bool<0004>
                          even<002B>
                        VarExp : Integer<0001>
                          n<002C>
                    LetExp : Unit<0006>
                      ValBind
                        _<002E> : Unit<0006>
                        AppExp : Unit<0006>
                          VarExp : String<0002> -> Unit<0006>
                            print<001D>
                          StrExp : String<0002>
                            "even "
                      LetExp : Unit<0006>
                        ValBind
                          _<002F> : Unit<0006>
                          AppExp : Unit<0006>
                            VarExp : String<0002> -> Unit<0006>
                              print<001D>
                            AppExp : String<0002>
                              VarExp : Integer<0001> -> String<0002>
                                intToString<0021>
                              VarExp : Integer<0001>
                                n<002C>
                        LetExp : Unit<0006>
                          ValBind
                            _<0030> : Unit<0006>
                            AppExp : Unit<0006>
                              VarExp : String<0002> -> Unit<0006>
                                print<001D>
                              StrExp : String<0002>
                                " = "
                          LetExp : Unit<0006>
                            ValBind
                              _<0031> : Unit<0006>
                              AppExp : Unit<0006>
                                VarExp : String<0002> -> Unit<0006>
                                  print<001D>
                                AppExp : String<0002>
                                  VarExp : Bool<0004> -> String<0002>
                                    boolToString<0023>
                                  VarExp : Bool<0004>
                                    even_n<002D>
                            AppExp : Unit<0006>
                              VarExp : String<0002> -> Unit<0006>
                                print<001D>
                              StrExp : String<0002>
                                "\n"
