(* type-checker.sml
 *
 * CMSC22610 Winter 2015
 *
 * COPYRIGHT (c) 2015 John Reppy (http://cs.uchicago.edu/~jhr)
 * All rights reserved.
 *)

signature TYPE_CHECKER =
  sig

    val chkProgram : Error.err_stream * ParseTree.program -> AST.program

  end

structure TypeChecker : TYPE_CHECKER =
  struct

  structure BN = BasisNames



    datatype cxt = C of {
        errS : Error.err_stream,
        span : Error.span,
        tvE  : TyVar.t AtomMap.map,
        tcE  : (TyCon.t * TyVar.t list * Type.ty) AtomMap.map,
        dcE  : Type.ty AtomMap.map,
        vE   : Type.ty AtomMap.map
    }


    fun initCXT (err, sp) = 
      let
        val tce1 = AtomMap.insert (AtomMap.empty, BN.bool, (Basis.boolTyc,[],Basis.boolTy))
        val tce2 = AtomMap.insert (tce1, BN.int, (Basis.intTyc,[],Basis.intTy))
        val tce3 = AtomMap.insert (tce2, BN.list, (Basis.listTyc,[TyVar.new(Atom.atom "a")],Basis.listTy(Type.VarTy(TyVar.new(Atom.atom "a")))))
        val tce4 = AtomMap.insert (tce3, BN.string, (Basis.stringTyc,[],Basis.stringTy))
        val tce  = AtomMap.insert (tce4, BN.unit, (Basis.unitTyc,[],Basis.unitTy))

        val dce1 = AtomMap.insert (AtomMap.empty, BN.boolFalse, DataCon.typeOf Basis.boolFalse)
        val dce2 = AtomMap.insert (dce1, BN.boolTrue, DataCon.typeOf Basis.boolTrue)
        val dce3 = AtomMap.insert (dce2, BN.listCons, DataCon.typeOf Basis.listCons)
        val dce4 = AtomMap.insert (dce3, BN.listNil, DataCon.typeOf Basis.listNil)
        val dce  = AtomMap.insert (dce4, BN.unitUnit, DataCon.typeOf Basis.unitUnit)

        val ve1  = AtomMap.insert (AtomMap.empty, BN.argc, Var.typeOf Basis.argc)
        val ve2  = AtomMap.insert (ve1, BN.arg, Var.typeOf Basis.arg)
        val ve3  = AtomMap.insert (ve2, BN.fail, Var.typeOf Basis.fail)
        val ve4  = AtomMap.insert (ve3, BN.ignore, Var.typeOf Basis.ignore)
        val ve5  = AtomMap.insert (ve4, BN.neg, Var.typeOf Basis.neg)
        val ve6  = AtomMap.insert (ve5, BN.not, Var.typeOf Basis.not)
        val ve7  = AtomMap.insert (ve6, BN.print, Var.typeOf Basis.print)
        val ve8  = AtomMap.insert (ve7, BN.size, Var.typeOf Basis.size)
        val ve   = AtomMap.insert (ve8, BN.sub, Var.typeOf Basis.sub)
      in
        C { errS = err, span = sp, tvE = AtomMap.empty, tcE = tce, dcE = dce, vE = ve}
      end

    (* mark returns a Context * Tree tuple with an updated span *)
    fun mark (C {errS, span, tvE, tcE, dcE, vE}, mrk) = (case mrk
        of {span = sp, tree = tr} => 
              (C {errS = errS, span = sp, tvE = tvE, tcE = tcE, dcE = dcE, vE = vE}, tr))

    
    (* set of helper functions to get context contents *)
    fun getERR (C {errS, span, tvE, tcE, dcE, vE}) = errS
    fun getSPAN (C {errS, span, tvE, tcE, dcE, vE}) = span
    fun getTVE (C {errS, span, tvE, tcE, dcE, vE}) = tvE
    fun getTCE (C {errS, span, tvE, tcE, dcE, vE}) = tcE
    fun getDCE (C {errS, span, tvE, tcE, dcE, vE}) = dcE
    fun getVE  (C {errS, span, tvE, tcE, dcE, vE}) = vE

    
    (* Helper function for envMerge. Merges two environments *)
    fun envMergeHelper (env1, env2) = AtomMap.unionWith (fn (x,y) => x) (env1, env2)
    
    
    (* merge contexts *)
    fun envMerge (cxt1, cxt2) = 
        let val tve1 = getTVE cxt1  (* environments from ctx1 *)
            val tce1 = getTCE cxt1
            val dce1 = getDCE cxt1
            val ve1  = getVE  cxt1

            val tve2 = getTVE cxt2  (* environments from ctx2 *)
            val tce2 = getTCE cxt2
            val dce2 = getDCE cxt2
            val ve2  = getVE  cxt2

            val tve = envMergeHelper (tve1, tve2)
            val tce = envMergeHelper (tce1, tce2)
            val dce = envMergeHelper (dce1, dce2)
            val ve  = envMergeHelper (ve1, ve2)
        in 
            C {errS = getERR(cxt1), span = getSPAN(cxt1), tvE = tve, tcE = tce, dcE = dce, vE = ve}
        end

    

    (* takes a ParseTree.typ and converts it into a Type.t type *)
    fun typToTy (typ) = (case typ
        of ParseTree.MarkTyp {span = sp, tree = t} => typToTy t
         | ParseTree.PolyTyp  (ids, typ) => Type.PolyTy(map (fn x => TyVar.new x) ids, typToTy typ)
         | ParseTree.VarTyp id =>  Type.VarTy(TyVar.new id)   
         | ParseTree.ConTyp (id, typs)    => raise Fail "typToTy : ParseTree.ConTyp"
         | ParseTree.FunTyp (ty1,ty2)  => Type.FunTy(typToTy ty1, typToTy ty2)
         | ParseTree.TupleTyp typs => Type.TupleTy (map (fn x => typToTy x) typs))



    fun typToTyOp typ = (case typ
        of NONE => NONE
         | SOME t => SOME (typToTy t))


    (*E |- fnsig |> E', t, rett *)
    fun chkFnSig (id,params,typ) = 
        raise Fail "type Check function binding (chkBind) to produce enriched ctx', typ, and ret typ"
    
    fun getTyFromExp (exp) = (case exp 
        of (AST.Exp(exprep, ty)) => ty
        (*end case*))
    

    fun updateTVE (C {errS, span, tvE, tcE, dcE, vE}, ids) =
        (case ids
           of []       => C {errS = errS, span = span, tvE = tvE, tcE = tcE, dcE = dcE, vE = vE}
            | id::rest => let val tvE' = AtomMap.insert (tvE, id, TyVar.new(id))
                              val ctx' = C {errS = errS, span = span, tvE = tvE', tcE = tcE, dcE = dcE, vE = vE}
                          in  
                              updateTVE (ctx', rest)
                          end 
        (* end case *))




    fun updateTCE (C {errS, span, tvE, tcE, dcE, vE}, atom1, atoms, typ) = 
        let val tyvars = map (fn x => TyVar.new x) atoms
            val tycon = TyCon.new (atom1, tyvars)
            val ty    = typToTy typ
            val tcE' = AtomMap.insert (tcE, atom1, (tycon,tyvars,ty))
        in
            C {errS = errS, span = span, tvE = tvE, tcE = tcE', dcE = dcE, vE = vE}
        end


    fun updateDCE (C {errS, span, tvE, tcE, dcE, vE}, atom1, atoms, cons) = 
        raise Fail "write updateDCE"

    fun updateVE (C {errS, span, tvE, tcE, dcE, vE}, bind) = 
        raise Fail "write updateVE"

    
    (* Like update TCE but the type list is empty in "val ty" *)
    fun addDataCon (C {errS, span, tvE, tcE, dcE, vE}, atom1, atoms) =
        let val tyvars = map (fn x => TyVar.new x) atoms
            val tycon = TyCon.new (atom1, tyvars)
            val ty    = Type.ConTy (tycon, [])
            val tcE' = AtomMap.insert (tcE, atom1, (tycon,tyvars,ty))
        in
            C {errS = errS, span = span, tvE = tvE, tcE = tcE', dcE = dcE, vE = vE}
        end




    fun chkProgram (errStrm, prog) = (case prog
        of ParseTree.MarkProgram {span = sp, tree = t} => (case t
            of ParseTree.Program (defs, exp) => 
                let val cxt = initCXT(errStrm,sp)
                    val cxt' = chkDefs (cxt, defs)
                    val exp' = chkExp (cxt, exp)
                in
                    AST.Program exp'
                end))
    and chkDefs (cxt, defs) = (case defs
        of [] => cxt   
         | (ParseTree.MarkDef dm)::rest 
            => let val (cxt', def) = mark(cxt, dm)
               in  chkDefs(cxt', def::rest)
               end
         | (ParseTree.TypeDef (id, ids, typ))::rest  
            => chkDefs( updateTCE(cxt, id, ids, typ), rest)
         | (ParseTree.DataDef (id, ids, cons))::rest 
            => let val ctx'  = addDataCon (cxt, id, ids) 
                   val ctx'' = updateTVE (ctx', ids)
                   val ctxFinal = chkDcon (ctx'', id, ids, cons)
               in 
                   chkDefs(ctxFinal, rest)
               end
         | (ParseTree.ValDef  bind)::rest 
            => chkDefs( chkBind(cxt, bind), rest)
         (*end case*))
    and chkTyp(ctx, typ) = (case typ 
        of (ParseTree.MarkTyp dm)
            => let val (ctx', typ') = mark (ctx, dm)
               in chkTyp(ctx', typ')
               end
         | (ParseTree.PolyTyp(ids, typ)) (*6.3 j1 ... this seems wrong*)
            => let val ctx' = updateTVE(ctx, ids)
               in typToTy(typ)
               end
         | (ParseTree.VarTyp (id)) (*6.3 j6*)
            => (case AtomMap.find(getTVE(ctx), id)
                    of SOME tyvar => Type.VarTy(tyvar)
                     | NONE => raise Fail "type variable id not found in tvE, called by chkTyp"
                (*end case*))
         | (ParseTree.ConTyp (id, typs)) (*6.3 j4&5*) 
            => (case AtomMap.find(getTCE(ctx),id)
                   of SOME(tycon, tyvars, ty) (*is type definition*) 
                           => (case TypeUtil.match(tyvars, 
                                             chkTyp(ctx, ParseTree.TupleTyp typs), 
                                             ty)
                                    of SOME(tys) => Type.TupleTy(tys)
                                     | NONE => Type.ErrorTy (*?????*)
                                (*end case*))
                    | NONE => (case AtomMap.find(getDCE(ctx),id) 
                               of SOME(Type.ConTy(Type.DataTyc(tycon),tys)) (*is data definition*)
                                       => TypeUtil.apply(#tyParams tycon, 
                                                         chkTyp(ctx, ParseTree.TupleTyp typs),
                                                         tys) 
                                | NONE => raise Fail "ConTyp id is in neither tcE nor dcE"
                                | _ => raise Fail "chkTyp found non data definition in dcE"
                                (*end case*))
                (*end case*))
         | (ParseTree.FunTyp (typ1, typ2)) (*6.3 j2*)
            => let val ty1 = chkTyp(ctx, typ1)
                   val ty2 = chkTyp(ctx, typ2)
               in  
                   Type.FunTy(ty1,ty2)
               end
         | (ParseTree.TupleTyp (typs)) (*6.3 j3*)
            => let fun chkTupleTyp (typs, acc) = (case typs
                   of nil => rev acc
                    | (t::typs') => let val typn = chkTyp(ctx,t)
                                   in chkTupleTyp(typs',typn::acc)
                                   end
                   (*end case*))
                   val tys = chkTupleTyp(typs,nil)
               in 
                   Type.TupleTy(tys)
               end
        (*end case*))
    and chkExp (ctx, exp) = (case exp
        of (ParseTree.MarkExp dm)
            => let val (ctx', exp') = mark (ctx, dm)
               in chkExp(ctx', exp')
               end
         | (ParseTree.IfExp (exp1, exp2, exp3))    => raise Fail "ParseTree.IfExp"
         | (ParseTree.BinExp (exp1, id, exp2))     => raise Fail "ParseTree.BinExp"
         | (ParseTree.AppExp (exp1, exp2))         => raise Fail "ParseTree.AppExp"
         | (ParseTree.TyAppExp (exp, typs))        => raise Fail "ParseTree.TyAppExp"
         | (ParseTree.VarExp (id))                 => raise Fail "ParseTree.VarExp"
         | (ParseTree.ConExp (id))                 => raise Fail "ParseTree.ConExp"
         | (ParseTree.IntExp (i))                  => raise Fail "ParseTree.IntExp"
         | (ParseTree.StrExp (str))                => raise Fail "ParseTree.StrExp"
         | (ParseTree.TupleExp (exps))             => raise Fail "ParseTree.TupleExp"
         | (ParseTree.CaseExp (exp, case_matches)) => raise Fail "ParseTree.CaseExp"
         | (ParseTree.LetExp scope)                => raise Fail "ParseTree.LetExp"
        (*end case*))
    and chkBind (ctx, bind) = (case bind 
        of (ParseTree.MarkBind dm)                    
            => let val (ctx', bind') = mark (ctx, dm)
               in chkBind(ctx', bind')
               end
         | (ParseTree.FunBind (id, params, typ, exp)) (*fun id (params) : typ = exp *)
            => let val (ctx', typ, retTyp) = chkFnSig(id,params,typ) (*might not need id?*)
                   val retTyp = chkExp(ctx', exp)
                in updateVE(ctx, bind)
                end
         | (ParseTree.ValBind (pat, maybeTyp, exp)) (*pat_ : typ => exp*)
            => (case maybeTyp
                of SOME(typ) 
                    => let  val typTy = chkTyp(ctx,typ)
                            val expTy = getTyFromExp(chkExp(ctx, exp))
                            val ctx'  = chkSpat(typTy, pat)
                        in if (TypeUtil.same(typTy, expTy))
                           then envMerge (ctx, ctx')
                           else raise Fail "Error: pattern typ and exp typ do not match in ValBind"
                        end 
                 | NONE      
                    => let val expTy = getTyFromExp(chkExp(ctx, exp))
                           val ctx'  = chkSpat(expTy, pat)
                       in envMerge (ctx, ctx')
                       end
                 (*end case*))
         | (ParseTree.ExpBind exp)
            => let val expResult = getTyFromExp(chkExp(ctx,exp)) 
               in if TypeUtil.same(expResult, Basis.unitTy) 
                  then ctx
                  else raise Fail "todo: prevent error propagation when ExpBind !: unit"
               end 
        (*end case*))
    and chkSpat(typ, pat) = raise Fail "todo: chkSpat"
    and chkDcon (cxt, id, ids, cons) = 
        let val tyvars = map (fn x => TyVar.new x) ids
            val tycon = TyCon.new (id, tyvars)
            val tve = getTVE cxt  
            val tce = getTCE cxt
            val ve  = getVE  cxt
            val err = getERR cxt 
            val span = getSPAN cxt 

            fun loop (env, cons') = (case cons'
                of [] => let val dce = envMergeHelper((getDCE cxt), env)
                         in  C {errS = err, span = span, tvE = tve, tcE = tce, dcE = dce, vE = ve} end  
                 | (ParseTree.Con (id', typop))::rest
                     => let val t   = typToTyOp typop 
                            val dce = AtomMap.insert(AtomMap.empty, id', DataCon.typeOf (DataCon.new (tycon, id', t)))
                            val env' = envMergeHelper (env, dce)
                        in  loop(env', rest) end
                 | (ParseTree.MarkCon cm)::rest => let val (cxt', tr) = mark(cxt, cm)
                                                   in  chkDcon(cxt', id, ids, tr::rest) end
                (* end case *))
        in
            loop (AtomMap.empty, cons)
        end 



    (* general TODO
    - binding checker 
    	- look for unbound variables 
    	- does NOT output AST
    	- "Establish the basic structure of the implementation"
    - implement type checker
    	- check for unbound variables
    	- check types
    	- does NOT produce AST
    	- extends binding checker
    	- closesly match rules from Section 6
    - implement "full type checker"
    	- find unbound variables, 
    	- check types 
    	- produces AST
    	- requires "additional information" in environment and in return type of each fxn
    - finally do full type checker + section 2 syntax restrictions

    - error reporting
    	- first make it so it dies after if finds an error
    	- if we have time, do one that sets the type to errorTy and continues
    *)

    (* Notes on Tips
	- define a “context” type that groups the envronments with the current span and the error stream using Atom.map
	-  Each judgement can be implemented as a function
		- the functions for judgements that type check expressions, match rules, and declarations will be mutually recursive. 
		- Each function for a judgement will have a case for each typing rule with that judgement as the conclusion.
    *)

  end
