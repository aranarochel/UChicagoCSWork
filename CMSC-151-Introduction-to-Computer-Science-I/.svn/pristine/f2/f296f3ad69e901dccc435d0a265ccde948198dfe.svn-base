#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 81 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 88 209 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 88 209 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 151 34 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 151 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 124 67 137 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 124 67 137 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 40 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 42 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 1527 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 181
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname grade"
 #"d-hw3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t "
 #"constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 18 3 21 #";; Jaime Arana-Rochel"
0 0 22 29 1 #"\n"
0 0 18 3 14 #";; aranarochel"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; CS151 Autumn 2012, Homework 3"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 22 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 22 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 25 #";; ===Data Definitions==="
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 22 #";; a doll is either a "
0 0 22 29 1 #"\n"
0 0 18 3 23 #";; - (make-central), or"
0 0 22 29 1 #"\n"
0 0 18 3 37 #";; - (make-shell d) where d is a doll"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 22 3 1 #" "
0 0 14 3 7 #"central"
0 0 22 3 4 #" ())"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 22 3 1 #" "
0 0 14 3 5 #"shell"
0 0 22 3 2 #" ("
0 0 14 3 5 #"inner"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 28 #";; a (listof bool) is either"
0 0 22 29 1 #"\n"
0 0 18 3 16 #";; - (empty), or"
0 0 22 29 1 #"\n"
0 0 18 3 49 #";; - (cons b bs) for b bool, and bs (listof bool)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 27 #";; a (listof num) is either"
0 0 22 29 1 #"\n"
0 0 18 3 16 #";; - (empty), or"
0 0 22 29 1 #"\n"
0 0 18 3 47 #";; - (cons n ns) for n num, and ns (listof num)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 30 #";; a (listof string) is either"
0 0 22 29 1 #"\n"
0 0 18 3 16 #";; - (empty), or"
0 0 22 29 1 #"\n"
0 0 18 3 53 #";; - (cons s ss) for a string, and ss (listof string)"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 19 #";; ===Operations==="
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 12 #";; Problem 1"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 27 #";; build-doll : nat -> doll"
0 0 22 29 1 #"\n"
0 0 18 3 30 #";; builds a doll with n layers"
0 0 22 29 1 #"\n"
0 0 18 3 36 #";; (not including the innermost one)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-doll"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #") ("
0 0 14 3 12 #"make-central"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 9 #"positive?"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 10 #"make-shell"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-doll"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-doll"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 12 #"make-central"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-doll"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 3 #") ("
0 0 14 3 10 #"make-shell"
0 0 22 3 2 #" ("
0 0 14 3 10 #"make-shell"
0 0 22 3 2 #" ("
0 0 14 3 12 #"make-central"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 12 #";; Problem 2"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 35 #";; xor-list : (listof bool) -> bool"
0 0 22 29 1 #"\n"
0 0 18 3 38 #";; exclusive-or for a list of booleans"
0 0 22 29 1 #"\n"
0 0 18 3 56 #";; where a list is true when exactly one element is true"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 1 #" "
0 0 14 3 3 #"lob"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lob"
0 0 22 3 2 #") "
0 0 14 3 5 #"false"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lob"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 9 #"boolean=?"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"lob"
0 0 22 3 3 #") ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"lob"
0 0 22 3 7 #"))))]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 3 #")) "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 4 #"true"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 1 #" "
0 0 14 3 5 #"false"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 4 #" )) "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 12 #";; Problem 3"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 49 #";; on-axis : symbol (listof num) -> (listof posn)"
0 0 22 29 1 #"\n"
0 0 18 3 59
#";; consumes a symbol (either 'x or'y) and a list of numbers"
0 0 22 29 1 #"\n"
0 0 18 3 67
#";; and returns a corresponding list of points on the specified axis"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 2 #") "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 8 #"symbol=?"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 2 #") "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 8 #"symbol=?"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 4 #")) ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"lon"
0 0 22 3 8 #")))])]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 2 #"-1"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 2 #"-1"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 12 #";; Problem 4"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 40 #";; draw-row1 : num num color color-> img"
0 0 22 29 1 #"\n"
0 0 18 3 49 #";; draws a row given a number of squares in a row"
0 0 22 29 1 #"\n"
0 0 18 3 59
#";; the lenght of each square, and the light and dark colors"
0 0 22 29 1 #"\n"
0 0 18 3 31 #";; starting with the dark color"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"draw-row1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 9 #"positive?"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"beside"
0 0 22 3 2 #" ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 9 #"draw-row1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 2 #") "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 7 #"))])]))"
0 0 22 29 1 #"\n"
0 0 20 3 15 #"\"eyeball tests\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"draw-row1"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"draw-row1"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"draw-row1"
0 0 22 3 1 #" "
0 0 21 3 1 #"5"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 40 #";; draw-row2 : num num color color-> img"
0 0 22 29 1 #"\n"
0 0 18 3 49 #";; draws a row given a number of squares in a row"
0 0 22 29 1 #"\n"
0 0 18 3 59
#";; the lenght of each square, and the light and dark colors"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; starting with the light color"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 9 #"positive?"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"beside"
0 0 22 3 2 #" ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 9 #"draw-row2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 2 #") "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 7 #"))])]))"
0 0 22 29 1 #"\n"
0 0 20 3 15 #"\"eyeball tests\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 21 3 1 #"5"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 44 #";; chessboard : num num color color -> image"
0 0 22 29 1 #"\n"
0 0 18 3 60
#";; creates a chessboard given the number of squares in a row"
0 0 22 29 1 #"\n"
0 0 18 3 33 #";; the side lenght of each square"
0 0 22 29 1 #"\n"
0 0 18 3 18 #";; the light color"
0 0 22 29 1 #"\n"
0 0 18 3 21 #";; and the dark color"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 6 #"square"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 22 3 2 #" ("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 3 #") ("
0 0 14 3 9 #"draw-row1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 20 #"overlay/align/offset"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 20 3 6 #"\"left\""
0 0 22 3 1 #" "
0 0 20 3 5 #"\"top\""
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 13 #"overlay/align"
0 0 22 3 1 #" "
0 0 20 3 6 #"\"left\""
0 0 22 3 1 #" "
0 0 20 3 5 #"\"top\""
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 6 #"rotate"
0 0 22 3 1 #" "
0 0 21 3 3 #"-90"
0 0 22 3 2 #" ("
0 0 14 3 9 #"draw-row2"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 4 #"))) "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"      "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"n2"
0 0 22 3 2 #" ("
0 0 14 3 10 #"chessboard"
0 0 22 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 22 3 1 #" "
0 0 14 3 2 #"n1"
0 0 22 3 2 #") "
0 0 14 3 2 #"n2"
0 0 22 3 1 #" "
0 0 14 3 2 #"c1"
0 0 22 3 1 #" "
0 0 14 3 2 #"c2"
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 20 3 14 #"\"eyeball test\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 1 #" "
0 0 21 3 2 #"50"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"white\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"4"
0 0 22 3 1 #" "
0 0 21 3 2 #"77"
0 0 22 3 1 #" "
0 0 20 3 8 #"\"yellow\""
0 0 22 3 1 #" "
0 0 20 3 8 #"\"purple\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 12 #";; Problem 6"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 49 #";; concat-with : string (listof string) -> string"
0 0 22 29 1 #"\n"
0 0 18 3 27 #";; concatenates all strings"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; with a given separator string"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 18 3 4 #";;[("
0 0 18 3 6 #"empty?"
0 0 18 3 9 #" los) \"\"]"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 7         277 4           0 0           0 45 0 22 3 1 #" "
0 0 14 3 4 #"Need"
0 0 22 3 1 #" "
0 0 14 3 2 #"to"
0 0 22 3 1 #" "
0 0 14 3 6 #"insert"
0 0 22 3 1 #" "
0 0 14 3 3 #"the"
0 0 22 3 1 #" "
0 0 14 3 4 #"line"
0 0 22 3 1 #" "
0 0 14 3 5 #"above"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 1 #" "
0 0 14 3 2 #"to"
0 0 22 3 1 #" "
0 0 14 3 5 #"avoid"
0 0 22 3 1 #" "
0 0 14 3 2 #"an"
0 0 22 3 1 #" "
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 16 3 4 #"when"
0 0 22 3 1 #" "
0 0 14 3 3 #"the"
0 0 22 3 1 #" "
0 0 14 3 5 #"input"
0 0 22 3 1 #" "
0 0 14 3 2 #"is"
0 0 22 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 3 #"\":\""
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #") "
0 0 20 3 2 #"\"\""
0 0 22 3 1 #")"
0           0 0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 14 3 5 #"first"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 2 #") "
0 0 14 3 1 #"s"
0 0 22 3 3 #") ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 6 #")))]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Crosby\""
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Stills\""
0 0 22 3 1 #" "
0 0 20 3 6 #"\"Nash\""
0 0 22 3 3 #")) "
0 0 20 3 20 #"\"Crosby,Stills,Nash\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 5 #"\"and\""
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 3 #"\"1\""
0 0 22 3 1 #" "
0 0 20 3 3 #"\"2\""
0 0 22 3 1 #" "
0 0 20 3 3 #"\"3\""
0 0 22 3 3 #")) "
0 0 20 3 11 #"\"1and2and3\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 4 #"\"<>\""
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 7 #"\"Billy\""
0 0 22 3 3 #")) "
0 0 20 3 7 #"\"Billy\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 12 #";; Problem 7"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 44 #";; proper-divisors : num num -> (listof num)"
0 0 22 29 1 #"\n"
0 0 18 3 62
#";; calculates a list of the proper divisors of a given integer"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 16 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"proper-divisors"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 5 #"zero?"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #") "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 8 #"integer?"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"       [("
0 0 14 3 8 #"integer?"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 2 #" ("
0 0 14 3 15 #"proper-divisors"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 4 #")))]"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 5 #"])]))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"proper-divisors"
0 0 22 3 1 #" "
0 0 21 3 1 #"6"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 15 #"proper-divisors"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 2 #") "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 25 #";; === Graders' Tests ==="
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 1 ==="
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-doll"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 12 #"make-central"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-doll"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 3 #") ("
0 0 14 3 10 #"make-shell"
0 0 22 3 2 #" ("
0 0 14 3 10 #"make-shell"
0 0 22 3 2 #" ("
0 0 14 3 12 #"make-central"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 2 ==="
0 0 22 29 1 #"\n"
0 0 20 3 10 #"\"xor-list\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #") "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 2 #"#f"
0 0 22 3 1 #" "
0 0 21 3 2 #"#f"
0 0 22 3 1 #" "
0 0 21 3 2 #"#t"
0 0 22 3 1 #" "
0 0 21 3 2 #"#f"
0 0 22 3 3 #")) "
0 0 14 3 4 #"true"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 2 #"#f"
0 0 22 3 1 #" "
0 0 21 3 2 #"#f"
0 0 22 3 1 #" "
0 0 21 3 2 #"#t"
0 0 22 3 1 #" "
0 0 21 3 2 #"#f"
0 0 22 3 1 #" "
0 0 21 3 2 #"#t"
0 0 22 3 3 #")) "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 8 #"xor-list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 3 #")) "
0 0 14 3 5 #"false"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 3 ==="
0 0 22 29 1 #"\n"
0 0 20 3 9 #"\"on axis\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 2 #"-1"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 2 #"-1"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"3"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 7 #"on-axis"
0 0 22 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 1 #" "
0 0 21 3 1 #"0"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 4 ==="
0 0 22 29 1 #"\n"
0 0 20 3 27 #"\"eyeball tests: chessboard\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"1"
0 0 22 3 1 #" "
0 0 21 3 2 #"30"
0 0 22 3 1 #" "
0 0 20 3 6 #"\"gray\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"2"
0 0 22 3 1 #" "
0 0 21 3 2 #"30"
0 0 22 3 1 #" "
0 0 20 3 6 #"\"gray\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"8"
0 0 22 3 1 #" "
0 0 21 3 2 #"12"
0 0 22 3 1 #" "
0 0 20 3 6 #"\"gray\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 1 #"9"
0 0 22 3 1 #" "
0 0 21 3 2 #"10"
0 0 22 3 1 #" "
0 0 20 3 6 #"\"gray\""
0 0 22 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"chessboard"
0 0 22 3 1 #" "
0 0 21 3 2 #"24"
0 0 22 3 1 #" "
0 0 21 3 1 #"8"
0 0 22 3 1 #" "
0 0 20 3 9 #"\"skyblue\""
0 0 22 3 1 #" "
0 0 20 3 10 #"\"darkblue\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 5 ==="
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 6 ==="
0 0 22 29 1 #"\n"
0 0 20 3 13 #"\"concat with\""
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 3 #"\":\""
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #") "
0 0 20 3 2 #"\"\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 5 #"\"boo\""
0 0 22 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #") "
0 0 20 3 2 #"\"\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 3 #"\",\""
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Crosby\""
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Stills\""
0 0 22 3 1 #" "
0 0 20 3 6 #"\"Nash\""
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 20 3 20 #"\"Crosby,Stills,Nash\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 5 #"\"<|>\""
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Crosby\""
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Stills\""
0 0 22 3 1 #" "
0 0 20 3 6 #"\"Nash\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 20 3 24 #"\"Crosby<|>Stills<|>Nash\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 22 3 2 #" ("
0 0 14 3 11 #"concat-with"
0 0 22 3 1 #" "
0 0 20 3 5 #"\"<|>\""
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 20 3 8 #"\"Crosby\""
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 14 #"              "
0 0 20 3 8 #"\"Crosby\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 20 #";; === problem 7 ==="
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 21 #";; === Evaluation ==="
0 0 22 29 1 #"\n"
0 0 18 3 57 #";; Good job on the implemented functions. Make sure that "
0 0 22 29 1 #"\n"
0 0 18 3 53 #";; you know how to implement the res of the homework."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; problem 1 (doll)         3/ 3"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; problem 2 (xor)          6/ 6"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; problem 3 (on-axis)      6/ 6"
0 0 22 29 1 #"\n"
0 0 18 3 33 #";; problem 4 (chessboard)   12/12"
0 0 22 29 1 #"\n"
0 0 18 3 50 #";; problem 5 (pascal)       0/12 no code submitted"
0 0 22 29 1 #"\n"
0 0 18 3 47 #";; problem 6 (concat-with)  5/ 6 see note above"
0 0 22 29 1 #"\n"
0 0 18 3 69
(
 #";; problem 7 (perfects)     4/10 only one helper function implemente"
 #"d"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 33 #";; style                    10/10"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; contracts                6/ 6"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; purposes                 6/ 6"
0 0 22 29 1 #"\n"
0 0 18 3 33 #";; adequate tests           10/10"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 32 #";; svn                      3/ 3"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 33 #";; _total-score_            71/90"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 18 3 28 #";; graded by Nedelina Teneva"
0 0 22 29 1 #"\n"
0           0
