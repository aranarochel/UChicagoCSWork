# Test INDEX-9
#
# Assuming this table and index:
#
#   CREATE TABLE numbers(code INTEGER PRIMARY KEY, textcode TEXT, altcode INTEGER);
#   CREATE INDEX idxNumbers ON numbers(altcode);
#
# Run the equivalent of this SQL query:
#
#   select textcode from numbers where altcode <= 93 order by altcode desc;
#
# Where there exists a row with altcode == 93

# This file has a Table B-Tree with height 3 (rooted at page 2)
# as well as an Index B-Tree (on column "altcode" of the 'numbers'
# table), rooted at page 163.
USE 1table-largebtree.cdb

%%

# Open the numbers table using cursor 0
# and the index using cursor 1
Integer      2    0  _  _  
Integer      163  1  _  _  
OpenRead     0    0  3  _
OpenRead     1    1  0  _

# Store 93 in register 2
Integer      93  2  _  _

# Move the index cursor to the entry with the largest key such that KeyIdx<=93.
# Get KeyPK, use it to seek into the table, and create a result 
# row with just column "textcode". Then, move to the next entry in
# the index (and end if there are no more entries in the index).
SeekLe       1  11  2  _
IdxPKey      1  3   _  _
Seek         0  14  3  _
Column       0  1   4  _
ResultRow    4  1   _  _
Prev         1  6   _  _

# Close the cursors
Close        0  _  _  _
Close        1  _  _  _
Halt         0  _  _  _

# The following Halt is only reached if the index contains
# an invalid entry (a KeyPK that is not found in the Table B-Tree)
# Note: SQLite would jump back to the index OpenRead, under the
# assumption that the index may have changed during the DBM's
# execution. We just consider this to be an error condition.
Halt         1  _  _  "KeyPK in index not found in table"


%%

"PK: 2933 -- IK: 93"
"PK: 2670 -- IK: 91"
"PK: 3736 -- IK: 89"
"PK: 8169 -- IK: 88"
"PK: 3607 -- IK: 80"
"PK: 1901 -- IK: 79"
"PK: 1830 -- IK: 77"
"PK: 1217 -- IK: 71"
"PK: 7771 -- IK: 69"
"PK: 5047 -- IK: 63"
"PK: 8893 -- IK: 58"
"PK: 3808 -- IK: 57"
"PK: 4881 -- IK: 51"
"PK: 8033 -- IK: 46"
"PK: 8446 -- IK: 43"
"PK: 2669 -- IK: 35"
"PK: 6713 -- IK: 31"
"PK: 7553 -- IK: 24"
"PK: 1635 -- IK: 23"
"PK: 2904 -- IK: 22"
"PK: 3720 -- IK: 20"
"PK: 241 -- IK: 11"

%%

R_0 integer 2
R_1 integer 163
R_2 integer 93
R_3 integer 241
R_4 string "PK: 241 -- IK: 11"

