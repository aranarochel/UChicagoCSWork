/* Graded lab3 */

/* ====== Makefile ====== */

evidence:
	gcc -Wall -o evidence_expt expt.c evidence_expt.c

raise:
	gcc -Wall -o raise expt.c raise.c
/* ====== expt.h ====== */

/* Jaime Arana-Rochel , aranarochel */
/* CS152, Winter 2013 */
/* Lab3 */ 

/* expt : int (unsigned int) -> (long int) */
/* linear time recursive exponentiation */
long int expt(int a, unsigned int n);

/* ss : int (unsigned int) -> (long int) */
/* exponentiation by successive squaring */
long int ss(int a, unsigned int n);

/* ssm : int (unsigned int) (unsigned int) -> int */
/* exponentiation modulo m by successive squaring */
int ssm(int a, unsigned int n, unsigned int m);

/* ====== expt.c ====== */

/* Jaime Arana-Rochel, aranarochel */
/* CS 152, Winter 2013 */
/* Lab 2 */
#include <stdio.h>
#include "expt.h"

long int expt(int a, unsigned int n)
{
  if (n == 0) {
    return 1;
  } else if (n > 0) {
    return a * expt(a, n - 1);
  }
}

long int ss(int a, unsigned int n)
{
  int i = n / 2;

  if (n == 0) {
    return 1;
  } else if (n == 1) {
    return a;
  } else if (n % 2 == 0) {      /* condition for even case */
    return ss(a * a, i);
  } else {
    return a * ss(a * a, (n - 1) / 2);
  }
}
/* #grader It's much simpler only to have 1 base case: n == 0.
 * Then you would have to do:
    return a * ss(a, n - 1);
 * for the odd case.*/

int ssm(int a, unsigned int n, unsigned int m)
{
  int i = n / 2;

  if (n == 0) {
    return 1;
  } else if (n == 1) {
    return a;
  } else if (n % 2 == 0) {
    return ssm(a * a, i, m) % m;
  } else {
    return a * ssm(a * a, (n - 1) / 2, m) % m;
  }
}
/* #grader Same as ss: better to have 1 base case. */


/* ====== evidence_expt.c ====== */

/* Jaime Arana-Rochel */
/* CS152, Winter 2013 */
/* Lab3 */

#include <stdio.h>
#include "expt.h"

void evidence_expt()
{
  printf("*** testing expt\n");
  printf("- expecting 1: %ld\n", expt(2,0));
  printf("- expecting 8: %ld\n", expt(2,3));
  printf("- expecting 25: %ld\n", expt(5,2));
}

void evidence_ss()
{
  printf("*** testing ss\n");
  printf("- expecting 1: %ld\n", ss(2,0));
  printf("- expecting 8: %ld\n", ss(2,3));
  printf("- expecting 25: %ld\n", ss(5,2));
}

void evidence_ssm()
{
  printf("*** testing ssm\n");
  printf("- expecting 24: %d\n", ssm(2,10,1000));
  printf("- expecting 0: %d\n", ssm(5,2,5));
  printf("- expecting 0: %d\n", ssm(2,15,16));
}

/* #grader Having test cases that directly test the base case of each function
 * can make debugging much simpler.  Also, more test cases is better. */

int main(int argc, char *argv[])
{
  evidence_expt();
  evidence_ss();
  evidence_ssm();
  return 0;
}


/* ====== raise.c ====== */

#include <stdlib.h>
#include <stdio.h>
#include "expt.h"

int main(int argc, char *argv[])
{
  int a = atoi(argv[1]);
  unsigned int n = atoi(argv[2]);
  printf("%ld\n",ss(a,n));
  return 0;
}


/* ====== evaluation ======  */

/* It's bad style not to fix your errors.  Use else instead of else if for your
last condition in expt.c. */

/* Makefile :         6/ 6 */
/* expt.h   :         6/ 6 */
/* expt.c   :        10/10 */
/* evidence_expt.c : 24/30 */
/* raise.c :          6/ 6 */

/* style :            8/10 */
/* svn :              4/ 4 */

/* _total-score_ :   64/72*/

/* graded by Nick Seltzer */
