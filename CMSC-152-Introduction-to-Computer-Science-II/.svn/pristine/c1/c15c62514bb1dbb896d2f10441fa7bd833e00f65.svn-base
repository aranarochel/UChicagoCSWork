/* Jaime Arana-Rochel, aranarochel */
/* CS152, Winter 2013 */
/* Homework 5 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "huff.h"

huff *huff_singleton(char c, int n)
{
  huff *new = (huff*)malloc(sizeof(huff));
  new->tag = LEAF;
  new->h.leaf.c = c;
  new->h.leaf.n = n;
  return new;
}


int huff_weight(huff *h)
{
  if(h->tag == LEAF) { 
    return h->h.leaf.n;
  } else {
    return h->h.node.n;
  }
}


huff *huff_merge(huff *h1, huff *h2)
{
  huff *new = (huff*)malloc(sizeof(huff));
  
  new->tag = NODE;
  new->h.node.n = huff_weight(h1) + huff_weight(h2);
  new->h.node.lsub = h1;
  new->h.node.rsub = h2;
  
  return new;
}

 
void huff_show(huff *h)
{
  if(h == NULL)
    putchar(' ');
  if(h->tag == LEAF) {
    printf("  %c (%d)\n",h->h.leaf.c,huff_weight(h));
  } else {
    printf("%d:\n",huff_weight(h));
    huff_show(h->h.node.lsub);
    huff_show(h->h.node.rsub);
  }
}


hll *hll_cons(huff *h,hll *hs)
{
  hll *new = (hll*)malloc(sizeof(hll));
  new->huff = h;
  new->next = hs;
  return new;
}


int hll_length(hll *hs)
{
  int tot = 0;
  while(hs != NULL) {
    tot++;
    hs = hs->next;
  }
  return tot;
}


hll *hll_insert(huff *h,hll*hs)
{
  if(hs == NULL)
    return hll_cons(h,NULL);
  if(huff_weight(h) < huff_weight(hs->huff)) {
    return hll_cons(h,hs);
  } else {
    return hll_cons(hs->huff,hll_insert(h,hs->next));
  }
}


hll *hll_sort(hll *hs)
{
  if(hs == NULL) {
    return NULL;
  } else {
    return hll_insert(hs->huff,hll_sort(hs->next));
  }
}


int count(char c,char *s)
{
  int tot = 0;
  int i;
  for(i = 0; i < strlen(s); i++)
    if(s[i] == c)
      tot++;
  return tot;
}



hll *word_to_hll(char *s)
{
  char *alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  
  char *new = strdup(s);
  hll *first = NULL;
  
  int i = 0;
  int j;
  int k;
  
  // converts string to uppercase
  while(s[i]) {
    new[i] = toupper(s[i]);
    i++;
  }

  // creates an array of weights
  int a[26];
  for(k = 0; alph[k] != '\0'; k++) {
    a[k] = count(alph[k],new);
  }

  // creates a huff linked list out of string
  for(j = 26; j >= 0; j--) {
    if(a[j] != 0) {
      first = hll_cons(huff_singleton(alph[j],a[j]),first);
    }
  }
  return hll_sort(first);
}

hll *hll_rem(huff *h,hll* hs)
{
  hll *prev, *curr;
  if(h == NULL)
    return NULL;
  if(hs->huff == h) {
    hll *t = hs->next;
    free(hs);
    return t;
  }
  
  prev = hs;
  curr = hs->next;
  while(curr != NULL) {
    if(curr->huff == h) {
      prev->next = curr->next;
      free(curr);
      return hs;
    }
    curr = curr->next;
    prev = prev ->next;
  }
  return hs;
}


hll *fold_tree(hll* list)
{
  if(list == NULL) {
    return NULL;
  } else {
    huff *new = huff_merge(list->huff,fold_tree(list->next));
  }
  hll *new_list = hll_cons(new,NULL);
  return new_list;
}

    

int main(int argc,char *argv[])
{
  int i;
  hll *word = word_to_hll("SENSELESSNESS");
  for(i = 0; i <= hll_length(word)+2; i++) {
    huff_show(word->huff);
    word = word->next;
  }
  hll *new = fold_tree(word);
  huff_show(new->huff);
  return 0;
}
  
  
  
